{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","exports","getAll","axios","get","then","response","data","create","newObject","post","remove","id","delete","put","RedNotification","redMessage","className","GreenNotification","greenMessage","Search","person","number","searchName","setPersons","persons","setRedMessage","lowerName","setGreenMessage","toLowerCase","searchLower","includes","DisplayContacts","onClick","window","confirm","phonebookService","deleted","setTimeout","filter","catch","error","FormComponent","props","onSubmit","addPerson","value","newName","onChange","handleContactChange","newNumber","handleNumberChange","type","App","useState","setNewName","setNewNumber","setSearchName","useEffect","initialContacts","event","console","log","target","preventDefault","personObject","name","duplicate","map","length","returnedContact","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9861ff3f.chunk.js","sourcesContent":["import axios from \"axios\"\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst remove = (id) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst put = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst exports = {\r\n    getAll,\r\n    create,\r\n    remove,\r\n    put\r\n}\r\n\r\nexport default exports","import React, { useState, useEffect } from 'react'\nimport phonebookService from './services/persons'\n\n//Notification message styles\nconst RedNotification = ({ redMessage }) => {\n  if (redMessage === null) {\n    return null\n  }\n\n  return (\n    <div className=\"red\">\n      {redMessage}\n    </div>\n  )\n}\n\nconst GreenNotification = ({ greenMessage }) => {\n  if (greenMessage === null) {\n    return null\n  }\n\n  return (\n    <div className=\"green\">\n      {greenMessage}\n    </div>\n  )\n}\n\n\n//Search -> display contacts\nconst Search = ({id, person, number, searchName, setPersons, persons, setRedMessage, setGreenMessage}) => {\n  const lowerName = person.toLowerCase()\n  const searchLower = searchName.toLowerCase()\n  const match = lowerName.includes(searchLower) \n  if (match === true) {return(\n    <DisplayContacts id={id} person={person} number={number} persons={persons} setPersons={setPersons} setRedMessage={setRedMessage} />)}\n  else\n    {return(null)}\n}\n\nconst DisplayContacts = ({id, person, number, setPersons, persons, setRedMessage}) => {\n\n  return(\n    <div>{person} {number}\n    <button onClick={() => {if (window.confirm(`Delete ${person}?`))\n\n    {\n      phonebookService.remove(id) \n      .then(deleted => {\n        setRedMessage(\n          `Removed ${person}`\n        )\n        setTimeout(() => {\n          setRedMessage(null)\n        }, 5000)\n        setPersons(persons.filter(person => person.id !== id))\n      } )\n      .catch(error => {\n        setRedMessage(\n          `Information of ${person} has already been removed from the server`\n        )\n        setTimeout(() => {\n          setRedMessage(null)\n        }, 5000)\n      })\n    }\n    }} >\n    delete\n    </button>\n    </div>\n  )\n}\n\n//Component for the form with name & number\nconst FormComponent = (props) => {\n  return(\n    <form onSubmit={props.addPerson}>\n        name: <input\n          value={props.newName}\n          onChange={props.handleContactChange}\n          />\n        <div>\n        number: <input \n          value={props.newNumber}\n          onChange={props.handleNumberChange}/>\n        </div>\n          <button type=\"submit\">add</button>\n      </form>\n  )\n}\n\nconst App = () => {\n  const [ persons, setPersons] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber] = useState('')\n  const [ searchName, setSearchName] = useState('')\n  const [redMessage, setRedMessage] = useState(null)\n  const [greenMessage, setGreenMessage] = useState(null)\n\n\n//add contact and replace number\n  const addPerson = (event) => {\n    event.preventDefault()\n    const personObject = {\n      name: newName,\n      number: newNumber\n    }\n    const namesList = persons.map(person => ({name: person.name, id: person.id}))\n\n    const duplicate = namesList.filter(person => person.name === newName) \n\n    if (duplicate.length === 1)\n    {if (window.confirm(`${newName} is already added to phonebook,\n     replace with new number?`))\n    {\n      phonebookService.put(duplicate[0].id, personObject)\n      .then(returnedContact => {\n        setGreenMessage(\n          `Replaced number of ${newName}`\n        )\n        setTimeout(() => {\n          setGreenMessage(null)\n        }, 5000)      \n        setPersons(persons.map(person => person.id !== duplicate[0].id ? person : returnedContact))})\n      setNewName('')\n      setNewNumber('')\n    }\n    }\n    \n    if (duplicate.length === 0) {\n      phonebookService.create(personObject)\n      .then(returnedContact => {\n        setGreenMessage(\n          `Added ${personObject.name}`\n        )\n        setTimeout(() => {\n          setGreenMessage(null)\n        }, 5000)\n        setPersons(persons.concat(returnedContact))\n      } )\n        setNewName('')\n        setNewNumber('')\n    }\n  }\n\n\n  useEffect(() => {\n    phonebookService.getAll()\n    .then(initialContacts => {\n      setPersons(initialContacts)\n    })\n  },[])\n\n  const handleContactChange = (event) => {\n    console.log(event.target.value)\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    console.log(event.target.value)\n    setNewNumber(event.target.value)\n  }\n\n  const handleResults = (event) => {\n    console.log('search', event.target.value)\n    setSearchName(event.target.value)\n  }\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <RedNotification redMessage={redMessage} />\n      <GreenNotification greenMessage={greenMessage} />\n\n\n      search: <input \n        value={searchName}\n        onChange={handleResults}/>\n\n      <FormComponent addPerson={addPerson} newName={newName} handleContactChange={handleContactChange} \n      newNumber={newNumber} handleNumberChange={handleNumberChange}/>\n\n    \n      <h2>Numbers</h2>\n      <ul>\n      {persons.map(person => \n        <Search key={person.id} id={person.id} person={person.name} number={person.number} searchName={searchName} persons={persons} setPersons={setPersons} setRedMessage={setRedMessage}/>)}\n      </ul>\n    </div>\n  )\n\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App.js'\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}